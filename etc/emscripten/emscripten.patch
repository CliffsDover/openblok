diff --git a/CMakeLists.txt b/CMakeLists.txt
index c52afa6..a0dad08 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -56,6 +56,25 @@ if(BUILD_TEST_COVERAGE)
 endif()
 
 
+# Emscripten
+if(EMSCRIPTEN)
+    set(CMAKE_EXECUTABLE_SUFFIX ".bc")
+    set(EMOPTIONS "${EMOPTIONS} -std=c++14") # bug?
+    set(EMOPTIONS "${EMOPTIONS} -O3")
+    # set(EMOPTIONS "${EMOPTIONS} -O0 -g4 -s ASSERTIONS=2 -s DEMANGLE_SUPPORT=1") # for debugging
+    set(EMOPTIONS "${EMOPTIONS} -s USE_SDL=2")
+    set(EMOPTIONS "${EMOPTIONS} -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS='[\"png\"]'")
+    set(EMOPTIONS "${EMOPTIONS} -s USE_SDL_TTF=2")
+    set(EMOPTIONS "${EMOPTIONS} -s USE_OGG=1 -s USE_VORBIS=1")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EMOPTIONS}")
+    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EMOPTIONS}")
+    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --preload-file ${CMAKE_SOURCE_DIR}/data@data")
+
+    # SDL2_mixer
+    include_directories(external/SDL2_mixer/installdir/include)
+endif()
+
+
 # Dependencies: SDL2
 set(SDL2PP_CXXSTD "c++14" CACHE STRING "libSDL2pp C++ standard")
 set(SDL2PP_WITH_IMAGE ON)
diff --git a/external/libSDL2pp/CMakeLists.txt b/external/libSDL2pp/CMakeLists.txt
index aaa6d90..d08669b 100644
--- a/external/libSDL2pp/CMakeLists.txt
+++ b/external/libSDL2pp/CMakeLists.txt
@@ -26,7 +26,7 @@ ELSE(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
 ENDIF(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
 
 # depends
-FIND_PACKAGE(SDL2 REQUIRED)
+# FIND_PACKAGE(SDL2 REQUIRED)
 SET(SDL2_ALL_INCLUDE_DIRS ${SDL2_INCLUDE_DIR})
 SET(SDL2_ALL_LIBRARIES ${SDL2_LIBRARY})
 SET(SDL2_ALL_PKGCONFIG_MODULES sdl2)
@@ -40,7 +40,7 @@ IF(MINGW)
 ENDIF(MINGW)
 
 IF(SDL2PP_WITH_IMAGE)
-	FIND_PACKAGE(SDL2_image REQUIRED)
+	# FIND_PACKAGE(SDL2_image REQUIRED)
 	SET(SDL2_ALL_INCLUDE_DIRS ${SDL2_ALL_INCLUDE_DIRS} ${SDL2_IMAGE_INCLUDE_DIR})
 	SET(SDL2_ALL_LIBRARIES ${SDL2_ALL_LIBRARIES} ${SDL2_IMAGE_LIBRARY})
 	SET(SDL2_ALL_PKGCONFIG_MODULES "${SDL2_ALL_PKGCONFIG_MODULES} SDL2_image")
@@ -49,7 +49,7 @@ ELSE(SDL2PP_WITH_IMAGE)
 ENDIF(SDL2PP_WITH_IMAGE)
 
 IF(SDL2PP_WITH_TTF)
-	FIND_PACKAGE(SDL2_ttf REQUIRED)
+	# FIND_PACKAGE(SDL2_ttf REQUIRED)
 	SET(SDL2_ALL_INCLUDE_DIRS ${SDL2_ALL_INCLUDE_DIRS} ${SDL2_TTF_INCLUDE_DIR})
 	SET(SDL2_ALL_LIBRARIES ${SDL2_ALL_LIBRARIES} ${SDL2_TTF_LIBRARY})
 	SET(SDL2_ALL_PKGCONFIG_MODULES "${SDL2_ALL_PKGCONFIG_MODULES} SDL2_ttf")
@@ -58,7 +58,7 @@ ELSE(SDL2PP_WITH_TTF)
 ENDIF(SDL2PP_WITH_TTF)
 
 IF(SDL2PP_WITH_MIXER)
-	FIND_PACKAGE(SDL2_mixer REQUIRED)
+	# FIND_PACKAGE(SDL2_mixer REQUIRED)
 	SET(SDL2_ALL_INCLUDE_DIRS ${SDL2_ALL_INCLUDE_DIRS} ${SDL2_MIXER_INCLUDE_DIR})
 	SET(SDL2_ALL_LIBRARIES ${SDL2_ALL_LIBRARIES} ${SDL2_MIXER_LIBRARY})
 	SET(SDL2_ALL_PKGCONFIG_MODULES "${SDL2_ALL_PKGCONFIG_MODULES} SDL2_mixer")
@@ -94,7 +94,7 @@ ELSE(MSVC)
 	#APPEND_CXX_FLAG_IF_SUPPORTED(-Wno-padded SDL2PP_WARNINGS)
 ENDIF(MSVC)
 
-LIST(REMOVE_DUPLICATES SDL2_ALL_INCLUDE_DIRS)
+# LIST(REMOVE_DUPLICATES SDL2_ALL_INCLUDE_DIRS)
 
 INCLUDE_DIRECTORIES(BEFORE ${PROJECT_SOURCE_DIR})
 INCLUDE_DIRECTORIES(SYSTEM ${SDL2_ALL_INCLUDE_DIRS})
diff --git a/external/libSDL2pp/SDL2pp/Font.cc b/external/libSDL2pp/SDL2pp/Font.cc
index 5d2a181..705f9fa 100644
--- a/external/libSDL2pp/SDL2pp/Font.cc
+++ b/external/libSDL2pp/SDL2pp/Font.cc
@@ -21,7 +21,7 @@
 
 #include <vector>
 
-#include <SDL2/SDL_ttf.h>
+#include <SDL_ttf.h>
 
 #include <SDL2pp/Font.hh>
 #include <SDL2pp/RWops.hh>
diff --git a/external/libSDL2pp/SDL2pp/Font.hh b/external/libSDL2pp/SDL2pp/Font.hh
index 32abb8f..44587e1 100644
--- a/external/libSDL2pp/SDL2pp/Font.hh
+++ b/external/libSDL2pp/SDL2pp/Font.hh
@@ -24,7 +24,7 @@
 
 #include <string>
 
-#include <SDL2/SDL_ttf.h>
+#include <SDL_ttf.h>
 
 #include <SDL2pp/Optional.hh>
 #include <SDL2pp/Point.hh>
diff --git a/external/libSDL2pp/SDL2pp/SDLTTF.cc b/external/libSDL2pp/SDL2pp/SDLTTF.cc
index 0eb187d..dfc067b 100644
--- a/external/libSDL2pp/SDL2pp/SDLTTF.cc
+++ b/external/libSDL2pp/SDL2pp/SDLTTF.cc
@@ -19,7 +19,7 @@
   3. This notice may not be removed or altered from any source distribution.
 */
 
-#include <SDL2/SDL_ttf.h>
+#include <SDL_ttf.h>
 
 #include <SDL2pp/SDLTTF.hh>
 #include <SDL2pp/Exception.hh>
diff --git a/src/game/layout/gameplay/PlayerArea.h b/src/game/layout/gameplay/PlayerArea.h
index f3eba48..b08e5d3 100644
--- a/src/game/layout/gameplay/PlayerArea.h
+++ b/src/game/layout/gameplay/PlayerArea.h
@@ -9,6 +9,8 @@
 #include "system/Color.h"
 #include "system/SoundEffect.h"
 
+#include <string>
+
 class AppContext;
 class Font;
 class GraphicsContext;
diff --git a/src/main.cpp b/src/main.cpp
index 330cfe7..8ac4962 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -26,13 +26,16 @@
 #include <algorithm>
 #include <chrono>
 #include <memory>
-#include <thread>
 #include <assert.h>
+#include <emscripten.h>
 
 
 const std::string LOG_MAIN = "main";
 const std::string LOG_HELP = "help";
 
+AppContext app;
+void runNextFrame();
+
 int main(int argc, const char** argv)
 {
     Log::info(LOG_MAIN) << "OpenBlok, created by Mátyás Mustoha, " << game_version << "\n";
@@ -62,7 +65,6 @@ int main(int argc, const char** argv)
     }
 
 
-    AppContext app;
     if (!app.init())
         return 1;
 
@@ -73,42 +75,39 @@ int main(int argc, const char** argv)
         return 1;
     }
 
+    emscripten_set_main_loop(runNextFrame, 0, 1);
+
+    // save input config on exit
+    const auto mappings = app.window().createInputConfig();
+    app.inputconfig().save(mappings, Paths::config() + "input.cfg");
+
+    return 0;
+}
+
+void runNextFrame()
+{
+    static auto gametime_delay = Timing::frame_duration; // start with an update
 
     auto frame_starttime = std::chrono::steady_clock::now();
     auto frame_planned_endtime = frame_starttime + Timing::frame_duration;
-    auto gametime_delay = Timing::frame_duration; // start with an update
-
-    while (!app.window().quitRequested()) {
-        try {
-            while (gametime_delay >= Timing::frame_duration && !app.states().empty()) {
-                auto events = app.window().collectEvents();
-                app.states().top()->update(events, app);
-                gametime_delay -= Timing::frame_duration;
-            }
-            if (app.states().empty())
-                break;
 
-            app.states().top()->draw(app.gcx());
-            app.gcx().render();
+    try {
+        while (gametime_delay >= Timing::frame_duration && !app.states().empty()) {
+            auto events = app.window().collectEvents();
+            app.states().top()->update(events, app);
+            gametime_delay -= Timing::frame_duration;
         }
-        catch (const std::exception& err) {
-            app.window().showErrorMessage(err.what());
-            return 1;
-        }
-
-        auto lag = std::max(std::chrono::steady_clock::now() - frame_planned_endtime, Duration::zero());
-        gametime_delay += Timing::frame_duration + lag;
+        if (app.states().empty())
+            return;
 
-        // max frame rate limiting
-        std::this_thread::sleep_until(frame_planned_endtime);
-
-        frame_starttime = std::chrono::steady_clock::now();
-        frame_planned_endtime = frame_starttime + Timing::frame_duration;
+        app.states().top()->draw(app.gcx());
+        app.gcx().render();
     }
+    catch (const std::exception& err) {
+        app.window().showErrorMessage(err.what());
 
-    // save input config on exit
-    const auto mappings = app.window().createInputConfig();
-    app.inputconfig().save(mappings, Paths::config() + "input.cfg");
+    }
 
-    return 0;
+    auto lag = std::max(std::chrono::steady_clock::now() - frame_planned_endtime, Duration::zero());
+    gametime_delay += Timing::frame_duration + lag;
 }
diff --git a/src/system/sdl/SDLGraphicsContext.cpp b/src/system/sdl/SDLGraphicsContext.cpp
index 4492aee..ce78b6c 100644
--- a/src/system/sdl/SDLGraphicsContext.cpp
+++ b/src/system/sdl/SDLGraphicsContext.cpp
@@ -51,7 +51,7 @@ void SDLGraphicsContext::render()
     renderer.Present();
     on_render_callback();
 
-    renderer.Clear();
+    // renderer.Clear();
 }
 
 unsigned short SDLGraphicsContext::screenWidth() const
