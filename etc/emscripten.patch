diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6acd2a4..b3f4003 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -17,6 +17,27 @@ if(BUILD_TESTS AND CMAKE_COMPILER_IS_GNUCXX)
 	setup_target_for_coverage(openblok_coverage openblok_test coverage)
 endif()
 
+# Emscripten
+if(EMSCRIPTEN)
+	set(CMAKE_EXECUTABLE_SUFFIX ".bc")
+	set(EMOPTIONS "${EMOPTIONS} -std=c++14") # bug?
+	set(EMOPTIONS "${EMOPTIONS} -O3")
+	# set(EMOPTIONS "${EMOPTIONS} -O0 -g4 -s ASSERTIONS=2 -s DEMANGLE_SUPPORT=1") # for debugging
+	set(EMOPTIONS "${EMOPTIONS} -s USE_SDL=2")
+	set(EMOPTIONS "${EMOPTIONS} -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS='[\"png\"]'")
+	set(EMOPTIONS "${EMOPTIONS} -s USE_SDL_TTF=2")
+	set(EMOPTIONS "${EMOPTIONS} -s USE_OGG=1 -s USE_VORBIS=1")
+	set(EMOPTIONS "${EMOPTIONS} -s NO_EXIT_RUNTIME=1")
+	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EMOPTIONS}")
+	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${EMOPTIONS}")
+	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --preload-file ${CMAKE_SOURCE_DIR}/data@data")
+
+	# SDL2_mixer
+	include_directories(external/SDL2_mixer/installdir/include)
+	# Lua
+	include_directories(external/lua/src)
+endif()
+
 
 # Dependencies: SDL2
 set(SDL2PP_WITH_IMAGE ON)
@@ -25,7 +46,7 @@ set(SDL2PP_WITH_TTF ON)
 add_subdirectory(external/libSDL2pp)
 
 # Dependencies: Lua
-find_package(Lua REQUIRED)
+# find_package(Lua REQUIRED)
 
 
 include_directories("src")
diff --git a/data/config/input.lua b/data/config/input.lua
index e8667db..57d0d98 100644
--- a/data/config/input.lua
+++ b/data/config/input.lua
@@ -6,7 +6,7 @@ game = {
 		move_down = 81,
 		move_left = 80,
 		move_right = 79,
-		rotate_left = 29,
+		rotate_left = {28, 29},
 		rotate_right = 27,
 	}
 }
diff --git a/external/libSDL2pp/CMakeLists.txt b/external/libSDL2pp/CMakeLists.txt
index aaa6d90..d08669b 100644
--- a/external/libSDL2pp/CMakeLists.txt
+++ b/external/libSDL2pp/CMakeLists.txt
@@ -26,7 +26,7 @@ ELSE(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
 ENDIF(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
 
 # depends
-FIND_PACKAGE(SDL2 REQUIRED)
+# FIND_PACKAGE(SDL2 REQUIRED)
 SET(SDL2_ALL_INCLUDE_DIRS ${SDL2_INCLUDE_DIR})
 SET(SDL2_ALL_LIBRARIES ${SDL2_LIBRARY})
 SET(SDL2_ALL_PKGCONFIG_MODULES sdl2)
@@ -40,7 +40,7 @@ IF(MINGW)
 ENDIF(MINGW)
 
 IF(SDL2PP_WITH_IMAGE)
-	FIND_PACKAGE(SDL2_image REQUIRED)
+	# FIND_PACKAGE(SDL2_image REQUIRED)
 	SET(SDL2_ALL_INCLUDE_DIRS ${SDL2_ALL_INCLUDE_DIRS} ${SDL2_IMAGE_INCLUDE_DIR})
 	SET(SDL2_ALL_LIBRARIES ${SDL2_ALL_LIBRARIES} ${SDL2_IMAGE_LIBRARY})
 	SET(SDL2_ALL_PKGCONFIG_MODULES "${SDL2_ALL_PKGCONFIG_MODULES} SDL2_image")
@@ -49,7 +49,7 @@ ELSE(SDL2PP_WITH_IMAGE)
 ENDIF(SDL2PP_WITH_IMAGE)
 
 IF(SDL2PP_WITH_TTF)
-	FIND_PACKAGE(SDL2_ttf REQUIRED)
+	# FIND_PACKAGE(SDL2_ttf REQUIRED)
 	SET(SDL2_ALL_INCLUDE_DIRS ${SDL2_ALL_INCLUDE_DIRS} ${SDL2_TTF_INCLUDE_DIR})
 	SET(SDL2_ALL_LIBRARIES ${SDL2_ALL_LIBRARIES} ${SDL2_TTF_LIBRARY})
 	SET(SDL2_ALL_PKGCONFIG_MODULES "${SDL2_ALL_PKGCONFIG_MODULES} SDL2_ttf")
@@ -58,7 +58,7 @@ ELSE(SDL2PP_WITH_TTF)
 ENDIF(SDL2PP_WITH_TTF)
 
 IF(SDL2PP_WITH_MIXER)
-	FIND_PACKAGE(SDL2_mixer REQUIRED)
+	# FIND_PACKAGE(SDL2_mixer REQUIRED)
 	SET(SDL2_ALL_INCLUDE_DIRS ${SDL2_ALL_INCLUDE_DIRS} ${SDL2_MIXER_INCLUDE_DIR})
 	SET(SDL2_ALL_LIBRARIES ${SDL2_ALL_LIBRARIES} ${SDL2_MIXER_LIBRARY})
 	SET(SDL2_ALL_PKGCONFIG_MODULES "${SDL2_ALL_PKGCONFIG_MODULES} SDL2_mixer")
@@ -94,7 +94,7 @@ ELSE(MSVC)
 	#APPEND_CXX_FLAG_IF_SUPPORTED(-Wno-padded SDL2PP_WARNINGS)
 ENDIF(MSVC)
 
-LIST(REMOVE_DUPLICATES SDL2_ALL_INCLUDE_DIRS)
+# LIST(REMOVE_DUPLICATES SDL2_ALL_INCLUDE_DIRS)
 
 INCLUDE_DIRECTORIES(BEFORE ${PROJECT_SOURCE_DIR})
 INCLUDE_DIRECTORIES(SYSTEM ${SDL2_ALL_INCLUDE_DIRS})
diff --git a/external/libSDL2pp/SDL2pp/Font.cc b/external/libSDL2pp/SDL2pp/Font.cc
index 5d2a181..705f9fa 100644
--- a/external/libSDL2pp/SDL2pp/Font.cc
+++ b/external/libSDL2pp/SDL2pp/Font.cc
@@ -21,7 +21,7 @@
 
 #include <vector>
 
-#include <SDL2/SDL_ttf.h>
+#include <SDL_ttf.h>
 
 #include <SDL2pp/Font.hh>
 #include <SDL2pp/RWops.hh>
diff --git a/external/libSDL2pp/SDL2pp/Font.hh b/external/libSDL2pp/SDL2pp/Font.hh
index 32abb8f..44587e1 100644
--- a/external/libSDL2pp/SDL2pp/Font.hh
+++ b/external/libSDL2pp/SDL2pp/Font.hh
@@ -24,7 +24,7 @@
 
 #include <string>
 
-#include <SDL2/SDL_ttf.h>
+#include <SDL_ttf.h>
 
 #include <SDL2pp/Optional.hh>
 #include <SDL2pp/Point.hh>
diff --git a/external/libSDL2pp/SDL2pp/SDLTTF.cc b/external/libSDL2pp/SDL2pp/SDLTTF.cc
index 0eb187d..dfc067b 100644
--- a/external/libSDL2pp/SDL2pp/SDLTTF.cc
+++ b/external/libSDL2pp/SDL2pp/SDLTTF.cc
@@ -19,7 +19,7 @@
   3. This notice may not be removed or altered from any source distribution.
 */
 
-#include <SDL2/SDL_ttf.h>
+#include <SDL_ttf.h>
 
 #include <SDL2pp/SDLTTF.hh>
 #include <SDL2pp/Exception.hh>
diff --git a/src/game/CMakeLists.txt b/src/game/CMakeLists.txt
index 6417570..100d5ab 100644
--- a/src/game/CMakeLists.txt
+++ b/src/game/CMakeLists.txt
@@ -82,9 +82,9 @@ if(NOT CMAKE_BUILD_TYPE MATCHES Release)
 endif()
 
 # use Lua
-include_directories(${LUA_INCLUDE_DIR})
+# include_directories(${LUA_INCLUDE_DIR})
 include_directories(${PROJECT_SOURCE_DIR}/external/sol)
 
 add_library(module_game ${MOD_GAME_SRC} ${MOD_GAME_H})
 target_link_libraries(module_game module_system)
-target_link_libraries(module_game ${LUA_LIBRARY})
+# target_link_libraries(module_game ${LUA_LIBRARY})
diff --git a/src/game/states/InitState.cpp b/src/game/states/InitState.cpp
index b9ada19..3ca4b3d 100644
--- a/src/game/states/InitState.cpp
+++ b/src/game/states/InitState.cpp
@@ -9,6 +9,8 @@
 InitState::InitState(AppContext& app)
 {
     auto mapping = app.config().loadInputMapping("data/config/input.lua");
+    Log::info("init") << "config: " << mapping.size() << "\n";
+
     app.config().saveInputMapping(mapping, "data/config/input.lua");
     app.window().setInputMapping(mapping);
 
diff --git a/src/main.cpp b/src/main.cpp
index 1043860..23f17fa 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -4,42 +4,35 @@
 #include "game/states/InitState.h"
 #include "system/Log.h"
 
-#include <chrono>
+#include <emscripten.h>
 #include <memory>
-#include <thread>
 #include <assert.h>
 
 
+AppContext app;
+void runNextFrame();
+
 int main(int, const char**)
 {
     Log::info("main") << "OpenBlok v0.1.0 by Mátyás Mustoha\n";
-    AppContext app;
     if (!app.init())
         return 1;
 
 
     app.states().emplace(std::make_unique<InitState>(app));
-
-
-    auto frame_starttime = std::chrono::steady_clock::now();
-    auto frame_endtime = frame_starttime + Timing::frame_duration;
-
-    while (!app.window().quitRequested()) {
-        auto events = app.window().collectEvents();
-
-        assert(app.states().size());
-        app.states().top()->update(events, app);
-        if (app.states().empty())
-            break;
-
-        app.states().top()->draw(app.gcx());
-        app.gcx().render();
-
-        // frame rate limiting
-        std::this_thread::sleep_until(frame_endtime);
-        frame_starttime = std::chrono::steady_clock::now();
-        frame_endtime = frame_starttime + Timing::frame_duration;
-    }
+    emscripten_set_main_loop(runNextFrame, 0, 1);
 
     return 0;
 }
+
+void runNextFrame()
+{
+    auto events = app.window().collectEvents();
+    assert(app.states().size());
+    app.states().top()->update(events, app);
+    if (app.states().empty())
+        return;
+
+    app.states().top()->draw(app.gcx());
+    app.gcx().render();
+}
diff --git a/src/system/CMakeLists.txt b/src/system/CMakeLists.txt
index 1cc1931..74eba79 100644
--- a/src/system/CMakeLists.txt
+++ b/src/system/CMakeLists.txt
@@ -52,8 +52,8 @@ add_library(module_system ${MOD_SYSTEM_SRC} ${MOD_SYSTEM_H})
 include_directories(${SDL2PP_INCLUDE_DIRS})
 
 # use Lua
-include_directories(${LUA_INCLUDE_DIR})
+# include_directories(${LUA_INCLUDE_DIR})
 include_directories(${PROJECT_SOURCE_DIR}/external/sol)
 
 target_link_libraries(module_system ${SDL2PP_LIBRARIES})
-target_link_libraries(module_system ${LUA_LIBRARY})
+# target_link_libraries(module_system ${LUA_LIBRARY})
diff --git a/src/system/sdl/SDLGraphicsContext.cpp b/src/system/sdl/SDLGraphicsContext.cpp
index 9667936..e75c1b0 100644
--- a/src/system/sdl/SDLGraphicsContext.cpp
+++ b/src/system/sdl/SDLGraphicsContext.cpp
@@ -47,7 +47,7 @@ void SDLGraphicsContext::render()
     renderer.Present();
     on_render_callback();
 
-    renderer.Clear();
+    // renderer.Clear();
 }
 
 unsigned short SDLGraphicsContext::screenWidth() const
